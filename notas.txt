Paso a Paso
***********

lista la paginacion, ahora ir con mosh y mejorarla

una card tiene 
	nombre
	apellido
	foto
	frase
	likes
	dislikes

una card puede estar en favoritos

usnado lodash

Armando el prototipo de una PhotoCard:	
    . cuando pasa a favoritos, va a tener que tener un nuevo id el tema del id con las fotos, likes, etc, 
        o quizas generar ids aleatorios en base al tiempo. Pensar una solucion.
        
    . luego de terminado el proyecto, implementarlo alguna parte con typescript    
    . emprolijar PhotoCardList
    . cuando se vuelve o recarga la pagina, la busqueda debe quedar en "" o en el ultimo valor buscado
    . los likes y dislikes deben ir en el albumapp
    . la lista de favoritos debera ir en el albumapp
	. checkear con mosh si es correcta la forma de filtrar una lista
	. implementar los botones compartir y descargar
	. crear paginacion de 10 publicaciones por pagina, con 3 o 4 paginas
	. implementar el header con los tabs de favoritos y buscar imagenes	
	. acomodar los colores con una paleta principal
	. tener un boton de darkmode		
	. implementar cada perfil de fotografo con un estilo propio

Jerarquia de componentes
************************

AlbumApp: switch, routes, data, filter, favoriteList

    1. HomePage (la informacion de content depende de header)
        2. Header
            Tabs
        2. Content
            PhotoCardList
            FavoriteList

    1. AuthorPage


Posteo de fotografos
********************

aparecen card con fotos y el avatar de un fotografo con una descripcion 
de la imagen

la imagen se puede compartir, darle me gusta, agregar a una lista 
de favoritos, ponerle like o dislike, descargarla

si se hace click en el header, se abre el perfil del usuario y
se muestran las fotos que subio el, junto a alguna informacion personal 
random

se le puede contactar por mail al autor

las imagenes en favoritos se pueden listar

estaria bueno poder simular la "compra" de imagenes en un carrito, pero quizas
esto lo deje para otro proyecto.

-------------------------------------

Ayuda memoria

useEffect(() => {
        console.log("hola!");

        return () => {
            console.log("borrando todo al desmontar el componente");
        };
    }, [variableQueHaceQueSeEjecuteLaFuncion]);

/////////////////////////////////////////////////////////
va dentro de la funcion

const a = document.createElement("a");
            a.href = URL.createObjectURL(
                new Blob([JSON.stringify(DATO_AQUI, null, 2)], {
                    type: "text/plain",
                })
            );
            a.setAttribute("download", "NOMBRE_ARCHIVO.EXTENSION");
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);

/////////////////////////////////////////////////////////////////

-- redireccionando las paginas con tabs

const handleChange = (event, newValue) => {
    history.push(`/hombe/${tabNameToIndex[newValue]}`);
    setSelectedTab(newValue);
};

/////////////////////////////////////////////////////////////////

const getNewData = async () => {
        // getNewData simulates a waiting time
        setData(null);
        setFilter("");
        const newList = await fetchData();
        await new Promise((resolve) => setTimeout(resolve, 1));
        setData(newList);
    };


---

import React, { useState } from "react";
import httpServices from "../services/httpServices";
import config from "../services/config.json";
// import { toast } from "react-toastify";
import * as userService from "../services/userService";
import { Button, TextField, Typography } from "@material-ui/core";
import { Box } from "@mui/system";
import { Grid } from "@material-ui/core";
import { Container } from "@material-ui/core";
import { Modal } from "@material-ui/core";
import { Paper } from "@material-ui/core";
import { makeStyles } from "@material-ui/core/styles";

const CreateAccount = () => {
    const [user, setUser] = useState({
        firstName: "",
        lastName: "",
        email: "",
    });

    const handleChange = (e) => {
        const newUserData = { ...user };
        newUserData[e.target.name] = e.target.value;
        setUser(newUserData);
    };

    const handleSubmit = async (e) => {
        e.preventDefault();

        try {
            await userService.createUser(user);
        } catch (ex) {
            // TODO: check error y mostrar algo en pantalla
        }

        //toast("revisa tu email!");
    };

    const [modal, setModal] = useState(false);

    const changeModalState = () => {
        setModal(!modal);
    };

    const openModal = () => {
        setModal(true);
    };

    const useStyle = makeStyles({
        paper: {
            width: "auto",
            padding: 10,
        },
        title: {
            paddingTop: 10,
        },
        field: {
            marginTop: 20,
            marginBottom: 20,
            display: "block",
        },
    });

    const classes = useStyle();

    const body = (
        <Container maxWidth='sm'>
            <Paper elevation={8} className={classes.paper}>
                <Typography
                    variant='h5'
                    color='primary'
                    align='center'
                    gutterBottom
                    className={classes.title}>
                    Creando tu cuenta
                </Typography>
                <form action='' noValidate autoComplete='off'>
                    <TextField
                        variant='outlined'
                        label='Nombre'
                        color='secondary'
                        fullWidth
                        required
                        InputLabelProps={{
                            shrink: true,
                        }}
                        className={classes.field}
                    />
                    <TextField
                        variant='outlined'
                        label='Apellido'
                        color='secondary'
                        required
                        fullWidth
                        InputLabelProps={{
                            shrink: true,
                        }}
                        className={classes.field}
                    />
                    <TextField
                        variant='outlined'
                        label='Email'
                        color='secondary'
                        required
                        fullWidth
                        InputLabelProps={{
                            shrink: true,
                        }}
                        className={classes.field}
                    />
                    <Button
                        type='submit'
                        color='secondary'
                        variant='contained'
                        size='small'>
                        Crear
                    </Button>
                </form>
            </Paper>
        </Container>
    );

    return (
        <>
            <Button onClick={() => openModal()}>Abrir</Button>
            {body}
            <Modal open={modal} onClose={changeModalState}>
                {body}
            </Modal>
            {/* <Container maxWidth=''>
                <Grid container direction={"column"}>
                    <Grid item>
                        <Typography variant='h5' component='div'>
                            Creando tu cuenta
                        </Typography>
                    </Grid>
                    <Grid item>
                        <TextField
                            id='firstName'
                            label='Nombre'
                            defaultValue=''
                        />
                    </Grid>
                    <Grid item>
                        <TextField
                            id='firstName'
                            label='Apellido'
                            defaultValue=''
                        />
                    </Grid>
                    <Grid item>
                        <TextField
                            id='firstName'
                            label='Email'
                            defaultValue=''
                        />
                    </Grid>
                </Grid>
            </Container> */}
        </>
        // {/* <h1>Creando tu cuenta de usuario</h1>
        // <form action='' onSubmit={handleSubmit}> */}
        // {/* <label htmlFor='firstName'>Nombre</label>
        //     <input
        //         type='text'
        //         name='firstName'
        //         id='firstName'
        //         value={user.firstName}
        //         onChange={handleChange}
        //     /> */}

        // {/* <label htmlFor='lastName'>Apellido</label>
        //     <input
        //         type='text'
        //         name='lastName'
        //         id='lastName'
        //         value={user.lastName}
        //         onChange={handleChange}
        //     />

        //     <label htmlFor='email'>Email</label>
        //     <input
        //         type='text'
        //         name='email'
        //         id='email'
        //         value={user.email}
        //         onChange={handleChange}
        //     />
        //     <button type='submit'>Crear</button>
        // </form> */}
    );
};

export default CreateAccount;
